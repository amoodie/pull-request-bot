# call with chronjob to check status of compact_proposal and 
# email Eric if there are open pull requests from me

import urllib.request
import json
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.header import Header


def call_api(github_url):
    with urllib.request.urlopen(github_url) as url:
        data = json.loads(url.read().decode())
    return data


def email_opener():
    text = ''
    text += 'Hello ' + html_mono(repo_owner) + ',\n\n'
    text += 'It has come to our attention that a repository you own:\n'
    text += html_indent(html_mono(repo_name))
    if n_open == 1:
        text += 'has an open pull request created by user:\n'
        text += html_indent(html_mono(pr_author))
    else:
        text += 'has open pull requests created by user:\n'
        text += html_indent(html_mono(pr_author))
    text += '\n'

    return text


def email_body():
    text = ''
    if n_open == 1:
        text += 'The pull request was opened on ' + oldest_fmt + '; that\'s ' + since_fmt + ' ago! '        
    else:
        text += 'The oldest of the pull requests was opened on ' + oldest_fmt + '; that\'s ' + since_fmt + ' ago! '
    text += 'Please log on to GitHub and review any open pull requests.\n\n'

    return text


def email_table():
    text = ''
    text += 'Some information about any open requests is below:'
    text += '''
            <table style="width:50%">
                <tr>
                    <th>'''+'Pull Request Title'+'''</th>
                    <th>'''+'Created on'+'''</th> 
                    <th>'''+'Author'+'''</th>
                </tr>
            '''
    for pr in range(n_open):
        text += '''
                <tr>
                    <td>'''+n_title[pr]+'''</td>
                    <td>'''+humread_fmt(n_created_dt[pr])+'''</td>
                    <td>'''+n_pr_author[pr]+'''</td>
                </tr>
           '''
       
    return text


def email_closer():
    text = ''
    text += '\n\n\nThis email was generated by a script and does not respond well to being threatened.\n'
    text += 'You can view the source code on <a href="https://github.com/amoodie/pull-request-bot">GitHub</a>.\n'
    return text


def send_email():
    html_text = email_text.replace("\n", html_newline)

    msg = MIMEText(html_text, 'html', 'UTF-8')
    msg['Subject'] = Header('You have unreviewed open pull requests', 'UTF-8')
    msg['From'] = creds['username']
    msg['To'] = send_email_to

    try:
        smtp_server = smtplib.SMTP_SSL(creds['smtp_server'], creds['smtp_port'])
        smtp_server.login(creds['username'], pwd)
        smtp_server.sendmail(creds['username'], send_email_to, msg.as_string())
        smtp_server.quit()
        print("Email successfully sent")
    except smtplib.SMTPException:
        print("Email NOT sent")





## CONFIGURATION ##

# load some configuration files
creds = json.load(open("credentials.json"))
pwd = open(creds["password"]).read()

# who should we send the email reminder to?
send_email_to = creds['send_email_to']

# who is the author of the open pull requests are we checking for?
pr_author = 'amoodie'

# who is the owner of the repo we are checking?
repo_owner = 'ericbarefoot'

# what is the name of the repo we are checking?
repo_name = 'compact_proposal'





## PROCESS SCRIPT ##

# some constructed api calls
base_url = 'https://api.github.com/repos/' + repo_owner + '/' + repo_name
openprby_url = 'https://api.github.com/search/issues?q=state%3Aopen+author%3A' + pr_author + '+type%3Apr'
openprin_repo = 'https://api.github.com/repos/' + repo_owner + '/' + repo_name + '/pulls?q=state%3Aopen'

# html formatters
html_mono = lambda text: '<tt>' +text+ '</tt>'
html_indent = lambda text: '<p style="text-indent: 40px">' +text+ '</p>'
html_newline = '<br>'

# make call to api for open prs in repo
json_data = call_api(openprin_repo)
# json_data = json.load(open('static_test_data.json'))

# initialize empty data
n_open = 0
n_title = []
n_created_at = []
n_pr_author = []

# loop through returned pull requests
for i in json_data:
    
    # check if author matches
    if i['user']['login'] == pr_author:
        
        # add to n_open
        n_open += 1

        # collect info
        n_title.append(i['title'])
        n_created_at.append(i['created_at'])
        n_pr_author.append(pr_author)

# if there were any open pull requests
if n_open > 0:

    # format some things for printing
    n_created_dt = [ datetime.strptime(ca[:-1], '%Y-%m-%dT%H:%M:%S') for ca in n_created_at ]
    oldest_dt = min(n_created_dt)
    humread_fmt = lambda dt: ' '.join(( dt.strftime('%B'), dt.strftime('%d').lstrip('0') ))
    oldest_fmt = humread_fmt(oldest_dt)
    since_dt = datetime.now() - oldest_dt
    if since_dt.days < 2:
        since_fmt = ' '.join(( str(int(since_dt.seconds / 60 / 60)), 'hours' ))
    else:
        since_fmt = ' '.join( (str(since_dt.days), 'days') )

    # construct the email
    email_text = ''
    email_text += email_opener()
    email_text += email_body()
    email_text += email_table()
    email_text += email_closer()

    # send the email
    send_email()

# report
print('There were ' + str(n_open) + ' open pull requests identified')